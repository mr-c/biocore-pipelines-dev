#!/usr/bin/env cwl-runner
class: Workflow
cwlVersion: v1.0
doc: 'ATAC-seq 02 trimming - reads: {{read_type|upper}}'
requirements:
 - class: ScatterFeatureRequirement
 - class: StepInputExpressionRequirement
 - class: InlineJavascriptRequirement
{% set read_pairs = ["_read1", "_read2"] if read_type == "pe" else [""] %}
inputs:
{% for read_pair in read_pairs %}
   input{{ read_pair }}_fastq_files:
     doc: Input fastq files{% if read_type == 'pe' %} for paired{{ read_pair }}{% endif %}
     type: File[]
   input{{ read_pair }}_adapters_files:
     doc: Input adapters files{% if read_type == 'pe' %} for paired{{ read_pair }}{% endif %}
     type: File[]
{% endfor %}
   quality_score:
     default: -phred33
     type: string
   trimmomatic_jar_path:
     default: /usr/share/java/trimmomatic.jar
     doc: Trimmomatic Java jar file
     type: string
   trimmomatic_java_opts:
     doc: JVM arguments should be a quoted, space separated list
     type: string?
   nthreads:
     default: 1
     doc: Number of threads
     type: int
steps:
{% if read_type == 'pe' %}
   concat_adapters:
     run: ../utils/concat-files.cwl
     in:
       input_file1: input_read1_adapters_files
       input_file2: input_read2_adapters_files
     scatterMethod: dotproduct
     scatter:
     - input_file1
     - input_file2
     out:
     - output_file
{% endif %}
{% for read_pair in read_pairs %}
   extract_basename{{ read_pair }}:
     run: ../utils/extract-basename.cwl
     scatter: input_file
     in:
{% if read_type == "pe" and read_pair == "_read2" %}
       input_file: trimmomatic/output_read2_trimmed_paired_file
{% else %}
       input_file: trimmomatic/output{% if read_type == "se" %}_read1{% else %}{{ read_pair }}{% endif %}_trimmed_file
{% endif %}
     out:
     - output_basename
{% endfor %}
   trimmomatic:
     run: ../trimmomatic/trimmomatic.cwl
     scatterMethod: dotproduct
     scatter:
     - input_read1_fastq_file
{% if read_type == "pe" %}
     - input_read2_fastq_file
{% endif %}
     - input_adapters_file
     in:
{% if read_type == "pe" %}
       input_read1_fastq_file: input_read1_fastq_files
       input_read2_fastq_file: input_read2_fastq_files
       input_adapters_file: concat_adapters/output_file
{% else %}
       input_read1_fastq_file: input_fastq_files
       input_adapters_file: input_adapters_files
{% endif %}
       phred:
         valueFrom: '33'
       nthreads: nthreads
       minlen:
         valueFrom: ${return 15}
       java_opts: trimmomatic_java_opts
       leading:
         valueFrom: ${return 3}
       slidingwindow:
         valueFrom: 4:20
       illuminaclip:
         valueFrom: 2:30:15
       trailing:
         valueFrom: ${return 3}
       trimmomatic_jar_path: trimmomatic_jar_path
       end_mode:
         valueFrom: {{ read_type | upper}}
     out:
     - output_read1_trimmed_file
{% if read_type == "pe" %}
     - output_read2_trimmed_paired_file
{% endif %}
{% for read_pair in read_pairs %}
   count_fastq_reads{{ read_pair }}:
     run: ../utils/count-fastq-reads.cwl
     scatterMethod: dotproduct
     scatter:
     - input_fastq_file
     - input_basename
     in:
       input_basename: extract_basename{{ read_pair }}/output_basename
{% if read_type == "pe" and read_pair == "_read2" %}
       input_fastq_file: trimmomatic/output_read2_trimmed_paired_file
{% else %}
       input_fastq_file: trimmomatic/output{% if read_type == "se" %}_read1{% else %}{{ read_pair }}{% endif %}_trimmed_file
{% endif %}
     out:
     - output_read_count
{% endfor %}
outputs:
{% for read_pair in read_pairs %}
   output_data_fastq{{ read_pair }}_trimmed_files:
     doc: Trimmed fastq files{% if read_type == 'pe' %} for paired{{ read_pair }}{% endif %}
     type: File[]
{% if read_type == "pe" and read_pair == "_read2" %}
     outputSource: trimmomatic/output_read2_trimmed_paired_file
{% else %}
     outputSource: trimmomatic/output{% if read_type == "se" %}_read1{% else %}{{ read_pair }}{% endif %}_trimmed_file
{% endif %}
   output_trimmed{{ read_pair }}_fastq_read_count:
     doc: Trimmed read counts of fastq files{% if read_type == 'pe' %} for paired{{ read_pair }}{% endif %}
     type: File[]
     outputSource: count_fastq_reads{{ read_pair }}/output_read_count
{% endfor %}